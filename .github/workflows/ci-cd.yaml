name: CI-CD

on: push

jobs:
  Model-Testing:
    runs-on: ubuntu-latest

    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cicd.txt

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: DVC PULL
        run: |
          dvc pull

      - name: Test-Model-Registry
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest tests/test_model_registry.py  

      - name: Test-Model-Performance
        if: success()
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest tests/test_model_performance.py

      - name: Promote-Model
        if: success()
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python promote_model.py 

      - name: Build Docker Image
        run: |
          docker build -t uber-demand:latest .

      # - name: Log in to Docker Hub
      #   run: |
      #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      
      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | \
          docker login --username AWS --password-stdin 476114157013.dkr.ecr.eu-north-1.amazonaws.com

      - name: Push Image to ECR  
        if: success()
        run: |
          docker tag uber-demand:latest 476114157013.dkr.ecr.eu-north-1.amazonaws.com/uber-demand:latest
          docker push 476114157013.dkr.ecr.eu-north-1.amazonaws.com/uber-demand:latest
      - name: Create .env for container
        run: |
          echo "DAGSHUB_USER_TOKEN=${{ secrets.DAGSHUB_TOKEN }}" > .env

      - name: Zip files for Deployment
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh \
          deploy/scripts/start_docker.sh \
          .env

      - name: Pushing deployment.zip to s3 bucket 
        run: |
          aws s3 cp deployment.zip s3://uber-demand-codedeploy-bucket-insha/deployment.zip
      
      - name: Trigger CodeDeploy Deployment
        if: success()
        run: |
          aws deploy create-deployment --application-name uber-demand-app \
          --deployment-group-name uber-demand-rolling-grp \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --s3-location bucket=uber-demand-codedeploy-bucket-insha,key=deployment.zip,bundleType=zip \
          --file-exists-behavior OVERWRITE \
          --region eu-north-1